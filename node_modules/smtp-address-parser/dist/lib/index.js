"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalize = exports.parse = void 0;
// const punycode = require('punycode');
const nearley = require("nearley");
const grammar_1 = __importDefault(require("./grammar"));
grammar_1.default.ParserStart = "Mailbox";
const grammar = nearley.Grammar.fromCompiled(grammar_1.default);
// <https://tools.ietf.org/html/rfc5321#section-4.1.2>
function parse(address) {
    const parser = new nearley.Parser(grammar);
    parser.feed(address);
    if (parser.results.length !== 1) {
        throw new Error("address parsing failed: ambiguous grammar");
    }
    return parser.results[0];
}
exports.parse = parse;
/**
 * Apply common address normalization rules, strip "+something" and
 * remove interior "."s in a dotString. Fold case.
 */
function normalize(address) {
    const a = parse(address);
    const domain = (function () {
        if (a.domainPart.AddressLiteral)
            return a.domainPart.AddressLiteral;
        return a.domainPart.DomainName.toLowerCase();
    })();
    const local = (function () {
        if (a.localPart.QuotedString) {
            // Should normalize quoted string.
            return a.localPart.QuotedString;
        }
        const tagless = (function () {
            const plus_loc = a.localPart.DotString.indexOf("+");
            if (plus_loc === -1) {
                return a.localPart.DotString;
            }
            return a.localPart.DotString.substr(0, plus_loc);
        })();
        const dotless = tagless.replace(/\./g, "");
        return dotless.toLowerCase();
    })();
    return `${local}@${domain}`;
}
exports.normalize = normalize;
//# sourceMappingURL=index.js.map